{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/nclack/noid/schemas/datasources/datasources.schema.json",
  "title": "Data Sources Schema",
  "description": "Schema for spatial data sources with URI-based addressing",
  "$ref": "#/definitions/DataSource",
  "$defs": {
    "DataSource": {
      "type": "object",
      "title": "DataSource",
      "description": "A spatial data source with type-specific encoding format constraints",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier within the set of data sources"
        },
        "name": {
          "type": "string",
          "description": "Human-readable name for the data source"
        },
        "description": {
          "type": "string",
          "description": "Description of the data source"
        },
        "contentUrl": {
          "type": "string",
          "format": "uri",
          "description": "URI to the data source, may include fragment identifier for container addressing (e.g., https://path/to/my.zarr#subarray/path)"
        },
        "type": {
          "type": "string",
          "enum": ["array", "table", "points", "mesh"],
          "description": "Type of spatial data"
        },
        "encodingFormat": {
          "type": "string",
          "description": "Format of the data source, must be valid for the specified type"
        },
        "sha256": {
          "type": "string",
          "pattern": "^[a-f0-9]{64}$",
          "description": "Optional SHA256 hash of the data source"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "contentUrl",
        "type",
        "encodingFormat"
      ],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": { "type": { "const": "array" } }
          },
          "then": {
            "properties": {
              "encodingFormat": { "const": "application/zarr+ome" }
            }
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "table" } }
          },
          "then": {
            "properties": {
              "encodingFormat": { "const": "application/parquet" }
            }
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "points" } }
          },
          "then": {
            "properties": {
              "encodingFormat": { "const": "application/parquet" }
            }
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "mesh" } }
          },
          "then": {
            "properties": {
              "encodingFormat": {
                "const": "application/neuroglancer-precomputed"
              }
            }
          }
        }
      ]
    }
  },
  "examples": [
    {
      "id": "cells_array",
      "name": "Cell Segmentation Array",
      "description": "3D segmentation masks for individual cells",
      "contentUrl": "https://example.com/data/segmentation.zarr#labels/cells",
      "type": "array",
      "encodingFormat": "application/zarr+ome",
      "sha256": "a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890"
    },
    {
      "id": "metadata_table",
      "name": "Cell Metadata",
      "description": "Quantitative measurements and annotations for each cell",
      "contentUrl": "https://example.com/data/cell_metadata.parquet",
      "type": "table",
      "encodingFormat": "application/parquet"
    },
    {
      "id": "nuclei_centroids",
      "name": "Nuclei Center Points",
      "description": "XYZ coordinates of detected nuclei centers",
      "contentUrl": "https://example.com/data/nuclei_points.parquet",
      "type": "points",
      "encodingFormat": "application/parquet"
    },
    {
      "id": "cell_surface",
      "name": "Cell Surface Mesh",
      "description": "3D mesh representation of cell boundaries",
      "contentUrl": "https://example.com/data/meshes/cell_surfaces",
      "type": "mesh",
      "encodingFormat": "application/neuroglancer-precomputed"
    }
  ]
}
