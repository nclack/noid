# generated by datamodel-codegen:
#   filename:  transforms.v0.schema.json
#   timestamp: 2025-06-16T04:01:13+00:00

from __future__ import annotations

from enum import Enum
from typing import Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, PositiveFloat, RootModel, constr


class Identity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    identity: Sequence = Field(
        ..., description='Identity transform requires empty array', max_length=0
    )


class Translation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    translation: Sequence[float] = Field(
        ..., description='Translation vector as array of numbers', min_length=1
    )


class ScaleItem(RootModel[PositiveFloat]):
    root: PositiveFloat


class Scale(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scale: Sequence[ScaleItem] = Field(
        ..., description='Scale factors as array of positive numbers', min_length=1
    )


class MapAxis(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mapAxis: Mapping[
        constr(pattern=r'^[a-zA-Z_][a-zA-Z0-9_]*$'),
        constr(pattern=r'^[a-zA-Z_][a-zA-Z0-9_]*$'),
    ] = Field(..., description='Axis mapping as object with string key-value pairs')


class Rotation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    rotation: Sequence[Sequence[float]] = Field(
        ..., description='Rotation matrix as 2D array of numbers', min_length=2
    )


class Homogeneous(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    homogeneous: Sequence[Sequence[float]] = Field(
        ..., description='Homogeneous transformation matrix as 2D array', min_length=2
    )


class Interpolation(Enum):
    linear = 'linear'
    nearest = 'nearest'
    cubic = 'cubic'


class Extrapolation(Enum):
    nearest = 'nearest'
    zero = 'zero'
    constant = 'constant'


class Displacements1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    path: str
    interpolation: Interpolation | None = None
    extrapolation: Extrapolation | None = None


class Displacements(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    displacements: str | Displacements1


class Coordinates1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lookup_table: str
    interpolation: Interpolation | None = None
    extrapolation: Extrapolation | None = None


class Coordinates(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    coordinates: Coordinates1 = Field(
        ..., description='Coordinate lookup configuration'
    )


class SequenceModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sequence: Sequence[Transform] = Field(
        ..., description='Array of transform objects to apply in sequence', min_length=1
    )


class Transform(
    RootModel[
        Identity
        | Translation
        | Scale
        | MapAxis
        | Rotation
        | Homogeneous
        | SequenceModel
        | Displacements
        | Coordinates
    ]
):
    root: (
        Identity
        | Translation
        | Scale
        | MapAxis
        | Rotation
        | Homogeneous
        | SequenceModel
        | Displacements
        | Coordinates
    ) = Field(
        ...,
        description='Schema for validating transform parameters using self-describing format',
        examples=[
            {'identity': []},
            {'translation': [10, 20, 5]},
            {'scale': [2.0, 1.5, 0.5]},
            {'mapAxis': {'x': 'y', 'y': 'x', 'z': 'z'}},
            {'rotation': [[0, -1, 0], [1, 0, 0], [0, 0, 1]]},
            {
                'homogeneous': [
                    [2.0, 0, 0, 10],
                    [0, 1.5, 0, 20],
                    [0, 0, 0.5, 5],
                    [0, 0, 0, 1],
                ]
            },
            {'sequence': [{'scale': [2.0, 2.0]}, {'translation': [10, 20]}]},
            {'displacements': 'path/to/displacement_field.zarr'},
            {
                'coordinates': {
                    'lookup_table': 'path/to/coordinate_lut.zarr',
                    'interpolation': 'linear',
                }
            },
        ],
        title='Transform Parameters Schema',
    )


SequenceModel.model_rebuild()
