# generated by datamodel-codegen:
#   filename:  spaces.v0.schema.json
#   timestamp: 2025-06-16T15:45:16+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class CoordinateSpacesSchema(BaseModel):
    pass


class DimensionType(Enum):
    space = 'space'
    time = 'time'
    other = 'other'
    index = 'index'


class Dimension(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(
        ...,
        description='Unique identifier for the dimension across all dimensions in a dataset',
    )
    unit: str = Field(
        ...,
        description="Unit of measurement. Use UDUNITS-2 terms for space/time dimensions, 'index' or 'arbitrary' for all types",
    )
    type: DimensionType = Field(
        ...,
        description="Type of dimension: 'space' for spatial, 'time' for temporal, 'other' for channels/indices/etc, 'index' for array indices",
        title='DimensionType',
    )


class CoordinateSystem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., description='Unique identifier for the coordinate system')
    dimensions: List[Union[str, Dimension]] = Field(
        ...,
        description='List of dimensions, specified either by ID reference or as full Dimension objects',
    )
    description: Optional[str] = Field(
        None, description='Optional description of the coordinate system'
    )


class Identity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    identity: List = Field(
        ..., description='Identity transform requires empty array', max_length=0
    )


class Translation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    translation: List[float] = Field(
        ..., description='Translation vector as array of numbers', min_length=1
    )


class Scale(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scale: List[float] = Field(
        ..., description='Scale factors as array of numbers', min_length=1
    )


class MapAxis(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mapAxis: Dict[
        constr(pattern=r'^[a-zA-Z_][a-zA-Z0-9_]*$'),
        constr(pattern=r'^[a-zA-Z_][a-zA-Z0-9_]*$'),
    ] = Field(..., description='Axis mapping as object with string key-value pairs')


class Homogeneous(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    homogeneous: List[List[float]] = Field(
        ...,
        description='Homogeneous transformation matrix as 2D array (affine/projective)',
        min_length=2,
    )


class Interpolation(Enum):
    linear = 'linear'
    nearest = 'nearest'
    cubic = 'cubic'


class Extrapolation(Enum):
    nearest = 'nearest'
    zero = 'zero'
    constant = 'constant'


class Displacements(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    path: str
    interpolation: Optional[Interpolation] = None
    extrapolation: Optional[Extrapolation] = None


class DisplacementLookupTable(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    displacements: Union[str, Displacements]


class Coordinates(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lookup_table: str
    interpolation: Optional[Interpolation] = None
    extrapolation: Optional[Extrapolation] = None


class CoordinateLookupTable(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    coordinates: Coordinates = Field(..., description='Coordinate lookup configuration')


class Transform(
    RootModel[
        Union[
            Identity,
            Translation,
            Scale,
            MapAxis,
            Homogeneous,
            DisplacementLookupTable,
            CoordinateLookupTable,
        ]
    ]
):
    root: Union[
        Identity,
        Translation,
        Scale,
        MapAxis,
        Homogeneous,
        DisplacementLookupTable,
        CoordinateLookupTable,
    ] = Field(
        ...,
        description='A coordinate transformation with self-describing parameters',
        title='Transform',
    )


class CoordinateTransform(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., description='Unique identifier for the coordinate transform')
    input: Union[List[Union[str, Dimension]], CoordinateSystem, str]
    output: Union[List[Union[str, Dimension]], CoordinateSystem, str]
    transform: Transform = Field(
        ..., description='Transform definition from the transforms vocabulary'
    )
    description: Optional[str] = Field(
        None, description='Optional description of the coordinate transform'
    )
